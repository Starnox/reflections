Lesson 1:
	How did viewing a diff between two versions of a file help you see the bug that was introduced?
		Because I got to see where the change was made and so able to figure out what went wrong.

	How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
		In case I want to return to a previous state of the project or keep a personal database where I can observe my workflow or others workflow.
		Another intersting thing you could do is divert from an original plan and keep track of both ways.
	
	What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saves, like Google Docs does?
		The advantages are that you have flexiblity over the project and can commit at points in time that seem logical. The con is that humans mistakes and can forget to commit.

	Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
		I think that tracking multiple files in one commit is good for big projects where different things interconnect with each other through multiple files.

	How can you use the commands git log and git diff to view the history of files?
		Git log shows all the commits since the beggining of the projects and displays some infomarmation about them like the date of the commit and the author.
		The git diff command requires two parameters which are the ids of the two commits we wish to compare.
	
	How might using version control make you more confident to make changes that could break something?
		Because you have the insurance that even if you break something you can easily go back and figure out where the mistake was made.

	Now that you have your workspace set up, what do you want to try using Git for?
		I want to use Git to advance my skills as a software developer and be able to take risks when changing lines of codes.

